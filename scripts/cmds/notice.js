const { getStreamsFromAttachment } = global.utils;

module.exports = {
  config: {
    name: "notice",
    version: "3.0",
    author: "Alamin Modified",
    role: 2,
    shortDescription: "Send notice to user/group",
    longDescription: "Send notice to inbox, group or selected numbers",
    category: "owner",
    guide: ".notice <message> : all | allgc | user <rank/uid> | group <rank/uid>"
  },

  onStart: async function ({ api, event, message, args }) {
    const fullInput = args.join(" ").trim();

    // ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü, ‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡ßü
    if (!fullInput.includes(":")) {
      // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ì ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
      const allThreads = await api.getThreadList(1000, null, ["INBOX"]);
      const users = allThreads.filter(t => !t.isGroup);
      const groups = allThreads.filter(t => t.isGroup);

      let reply = `üßë‚Äçüíª ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n`;
      users.forEach((u, i) => {
        reply += `${i + 1}. ${u.name || "Unknown"} (${u.threadID})\n`;
      });

      reply += `\nüë• ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n`;
      groups.forEach((g, i) => {
        reply += `${i + 1}. ${g.name || "Unknown"} (${g.threadID})\n`;
      });

      reply += `\nüí° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n.notice <message> : all | allgc | user <rank/uid> | group <rank/uid>`;
      return message.reply(reply);
    }

    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá message ‡¶Ü‡¶∞ command ‡¶¶‡ßÅ‡¶á ‡¶≠‡¶æ‡¶ó‡ßá ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶¨‡ßã
    const splitIndex = fullInput.indexOf(":");
    const msg = fullInput.slice(0, splitIndex).trim();
    let cmd = fullInput.slice(splitIndex + 1).trim().toLowerCase();

    // ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá message ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ
    const decoratedMsg = `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüîä ùêåùêûùê¨ùê¨ùêöùê†ùêû ùêÖùê´ùê®ùê¶ ùêÄùêùùê¶ùê¢ùêß\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n${msg}`;

    const formSend = {
      body: decoratedMsg,
      attachment: await getStreamsFromAttachment([
        ...event.attachments,
        ...(event.messageReply?.attachments || [])
      ])
    };

    const allThreads = await api.getThreadList(1000, null, ["INBOX"]);
    const users = allThreads.filter(t => !t.isGroup);
    const groups = allThreads.filter(t => t.isGroup);
    let targets = [];

    // ‡¶Ø‡¶¶‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ (rank) ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡ßÅ‡¶ù‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡¶ø
    // ‡¶Ø‡¶¶‡¶ø cmd ‡¶π‡ßü ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶¨ user list ‡¶•‡ßá‡¶ï‡ßá
    if (/^\d+$/.test(cmd)) {
      const index = parseInt(cmd) - 1;
      if (users[index]) {
        targets = [users[index]];
      }
    } else if (cmd === "all") {
      targets = [...users, ...groups];
    } else if (cmd === "allgc") {
      targets = [...groups];
    } else if (cmd.startsWith("user ")) {
      const key = cmd.slice(5).trim();
      const index = parseInt(key) - 1;
      if (!isNaN(index) && users[index]) {
        targets = [users[index]];
      } else {
        const found = users.find(u => u.threadID === key);
        if (found) targets = [found];
      }
    } else if (cmd.startsWith("group ")) {
      const key = cmd.slice(6).trim();
      const index = parseInt(key) - 1;
      if (!isNaN(index) && groups[index]) {
        targets = [groups[index]];
      } else {
        const found = groups.find(g => g.threadID === key);
        if (found) targets = [found];
      }
    } else {
      return message.reply(
        "‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü! ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®:\n.notice <msg> : all | allgc | user <rank/uid> | group <rank/uid>\n‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
      );
    }

    if (targets.length === 0) {
      return message.reply("‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßà‡¶ß ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§");
    }

    let success = 0;
    let fail = [];

    for (const t of targets) {
      try {
        await api.sendMessage(formSend, t.threadID);
        success++;
      } catch (e) {
        fail.push(t.threadID);
      }
      await new Promise(r => setTimeout(r, 1500));
    }

    message.reply(
      `‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá ${success} ‡¶ú‡¶®‡¶ï‡ßá‡•§${fail.length ? `\n‚ùå ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• UID: ${fail.join(", ")}` : ""}`
    );
  }
};
