const { MongoClient } = require("mongodb");
const fs = require("fs");
const path = require("path");

// Load MongoDB config from JSON
const configPath = path.join(__dirname, "alit", "mongo.json");
const { mongoURL, dbName, collectionName } = JSON.parse(fs.readFileSync(configPath, "utf-8"));

const client = new MongoClient(mongoURL, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

let connected = false;
let usersCollection;

async function connectDB() {
  if (!connected) {
    await client.connect();
    connected = true;
  }
  const db = client.db(dbName);
  usersCollection = db.collection(collectionName);
}

const slotSymbols = ['ÔøΩ', 'üçã', 'üçâ', 'üçá', '‚≠ê', '7Ô∏è‚É£'];

function getRandomSlot() {
  return slotSymbols[Math.floor(Math.random() * slotSymbols.length)];
}

function spinSlots() {
  return [getRandomSlot(), getRandomSlot(), getRandomSlot()];
}

function getCurrentDate() {
  const now = new Date();
  return `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;
}

// MQTT Message Editor - ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø mqttClient ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá
let count_req = 0; // Request ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞
function editMessage(messageID, text) {
  // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá mqttClient ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
  // ‡¶Ø‡¶¶‡¶ø mqttClient ‡¶∏‡¶Ç‡¶ú‡ßç‡¶û‡¶æ‡¶Ø‡¶º‡¶ø‡¶§ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§
  if (typeof mqttClient === 'undefined') {
    console.error("mqttClient ‡¶∏‡¶Ç‡¶ú‡ßç‡¶û‡¶æ‡¶Ø‡¶º‡¶ø‡¶§ ‡¶®‡ßü‡•§ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§");
    return;
  }

  // mqttClient ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶∂ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
  mqttClient.publish('/ls_req', JSON.stringify({
    "app_id": "2220391788200892", // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø
    "payload": JSON.stringify({
      tasks: [{
        label: '742',
        payload: JSON.stringify({
          message_id: messageID, // ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø
          text: text, // ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
        }),
        queue_name: 'edit_message',
        task_id: Math.random() * 1001 << 0,
        failure_count: null,
      }],
      epoch_id: generateOfflineThreadingID(), // ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
      version_id: '6903494529735864', // ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶Ü‡¶á‡¶°‡¶ø
    }),
    "request_id": ++count_req, // ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    "type": 3
  }));
}

function generateOfflineThreadingID() {
  var ret = Date.now();
  var value = Math.floor(Math.random() * 4294967295);
  var str = ("0000000000000000000000" + value.toString(2)).slice(-22);
  var msgs = ret.toString(2) + str;
  return binaryToDecimal(msgs);
}

function binaryToDecimal(data) {
  var ret = "";
  while (data !== "0") {
    var end = 0;
    var fullName = "";
    for (var i = 0; i < data.length; i++) {
      end = 2 * end + parseInt(data[i], 10);
      if (end >= 10) {
        fullName += "1";
        end -= 10;
      } else {
        fullName += "0";
      }
    }
    ret = end.toString() + ret;
    data = fullName.slice(fullName.indexOf("1"));
  }
  return ret;
}

module.exports = {
  config: {
    name: "slot",
    version: "1.0",
    author: "Seba x Alamin (modified)",
    role: 0,
    shortDescription: { en: "Spin the slot machine and bet!" },
    longDescription: { en: "Bet an amount and spin the slot machine. Win big if symbols match!" },
    category: "game",
    guide: { en: "{pn} [amount] ‚Äî Example: .slot 1000" }
  },

  onStart: async function ({ event, args, api }) {
    try {
      await connectDB();
  
      const uid = event.senderID;
  
      // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
      const userInfo = await api.getUserInfo(uid);
      const nameFromFB = userInfo[uid]?.name || "Unknown";
  
      const bet = parseInt(args[0]) || 100; // Default bet
  
      const godUID = "100077745636690";
  
      if (isNaN(bet) || bet <= 0) {
        return api.sendMessage("‚ùå | ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶ß‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
      }
  
      // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ / ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
      let user = await usersCollection.findOne({ uid });
      if (!user) {
        user = {
          uid,
          name: nameFromFB,
          balance: uid === godUID ? Infinity : 100,
          win: 0,
          loss: 0,
          streak: 0,
          last_bonus: null
        };
        await usersCollection.insertOne(user);
      } else {
        // ‡¶®‡¶æ‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        if (user.name !== nameFromFB) {
          await usersCollection.updateOne({ uid }, { $set: { name: nameFromFB } });
          user.name = nameFromFB;
        }
      }

      // Daily bonus
      const today = getCurrentDate();
      if (user.last_bonus !== today) {
        const newBalance = (user.balance === Infinity ? Infinity : user.balance + 100);
        await usersCollection.updateOne({ uid }, { $set: { last_bonus: today, balance: newBalance } });
        user.balance = newBalance;
        user.last_bonus = today;
      }

      if (uid !== godUID && user.balance < bet) {
        return api.sendMessage(`‚ùå | ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ‡ß≥${user.balance}`, event.threadID, event.messageID);
      }

      // Send initial slot spin
      const initSpin = spinSlots();
      const sent = await api.sendMessage(initSpin.join(' '), event.threadID);
      const messageID = sent.messageID;

      // Animate slot spinning
      // ‡¶∏‡ßç‡¶™‡¶ø‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡ß© ‡¶•‡ßá‡¶ï‡ßá ‡ß´ ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ‡¶≤‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
      const numSpins = Math.floor(Math.random() * (5 - 3 + 1)) + 3; 
      for (let i = 0; i < numSpins; i++) {
        const tempSpin = spinSlots();
        await new Promise(r => setTimeout(r, 800)); // 600ms ‡¶•‡ßá‡¶ï‡ßá 800ms ‡¶è ‡¶ß‡ßÄ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
        editMessage(messageID, tempSpin.join(' '));
      }

      // Final spin result
      const finalSpin = spinSlots();
      await new Promise(r => setTimeout(r, 800)); // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶ì ‡¶ß‡ßÄ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
      editMessage(messageID, finalSpin.join(' '));

      let result = "";
      let reward = 0;

      if (finalSpin[0] === finalSpin[1] && finalSpin[1] === finalSpin[2]) {
        reward = finalSpin[0] === '7Ô∏è‚É£' ? bet * 10 : bet * 5;
        if (uid !== godUID && user.balance !== Infinity) {
          user.balance += reward;
        }
        user.win += 1;
        user.streak += 1;

        await usersCollection.updateOne(
          { uid },
          {
            $set: { balance: user.balance, streak: user.streak },
            $inc: { win: 1 }
          }
        );

        result =
`${finalSpin.join(' ')}
ü•≥ Jackpot, ${user.name}! üí∏ You bet ‡ß≥${bet} üí∞You win ‡ß≥${reward} üíº Your current balance ‡ß≥${user.balance === Infinity ? "‚àû" : user.balance}`;
      } else {
        if (uid !== godUID && user.balance !== Infinity) {
          user.balance -= bet;
        }
        user.loss += 1;
        user.streak = 0;

        await usersCollection.updateOne(
          { uid },
          {
            $set: { balance: user.balance, streak: 0 },
            $inc: { loss: 1 }
          }
        );

        result =
`${finalSpin.join(' ')}
üòì Oops, ${user.name}...You lost ‡ß≥${bet}üíº Your current balance ‡ß≥${user.balance === Infinity ? "‚àû" : user.balance}`;
      }

      api.sendMessage(result, event.threadID);
    } catch (error) {
      console.error("‡¶∏‡ßç‡¶≤‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶∞‡¶∞:", error);
      api.sendMessage("‚ö†Ô∏è ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", event.threadID);
    }
  }
};
